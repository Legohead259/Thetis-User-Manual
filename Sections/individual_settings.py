import json
import os
import re


def to_camel_case(string):
    result = ""
    for word in re.sub('[^0-9a-zA-Z]+', ' ', string).split():
        if result == "":
            result += word.lower()
        elif len(word) == 2 and word == word.upper():  # if two letter acronym
            result += word
        else:
            result += word.lower().capitalize()
    return result


commands = ""
sections = ""

with open("DeviceSettings.json") as json_file:
    json_array = json.load(json_file)
    for json_object in json_array:

        temp_name = to_camel_case(json_object["name"])

        command = "\\" + temp_name + "Description"
        commands += "\\newcommand{" + command + "}\n{" + json_object["name"] + ".}\n\n"

        temp_type = "number"
        if "bool" in json_object["declaration"]:
            temp_type = "true or false"
        if "[" in json_object["declaration"]:
            temp_type = "string"

        type_default = json_object["default"].replace("{", "").replace("}", "")
        if "\"" in type_default:
            type_default = "\\enquote{" + type_default.replace("\"", "") + "}"

        try:
            calibration = json_object["calibration"]
        except:
            calibration = False
        try:
            read_only = json_object["read only"]
        except:
            read_only = False | calibration
        if read_only:
            read_only_string = " (read-only)"
        else:
            read_only_string = ""

        sections += "\\begingroup\n"
        sections += "    \\def\\tempSection{" + json_object["name"] + read_only_string + "}\n"
        sections += "    \\def\\tempLabel{sec:" + temp_name + "}\n"
        sections += "    \\def\\tempDescription{" + command + "}\n"
        sections += "    \\def\\tempKey{" + temp_name + "}\n"
        sections += "    \\def\\tempType{" + temp_type + "}\n"
        sections += "    \\def\\tempDefault{" + type_default + "}\n"
        sections += "    \\deviceSetting\n"
        sections += "\\endgroup\n\n"

with open("individualSettings.tex", "w") as tex_file:
    tex_file.write("% This file was generated by " + os.path.basename(__file__) + "\n\n")
    tex_file.write(commands)
    tex_file.write(sections)
